# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J8trApP6_G6RC7xR7968JsRej0Tb-GId

# 📘 Predicción de notas según hábitos estudiantiles 📘

## Introducción

Este proyecto analiza cómo los hábitos diarios de los estudiantes (como horas de estudio, uso de redes sociales, sueño, etc.) afectan su rendimiento académico. Utilizaremos un modelo de Machine Learning para predecir la nota del examen final en función de estos hábitos.
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("jayaantanaath/student-habits-vs-academic-performance")

print("Path to dataset files:", path)

"""## Carga de datos"""

import pandas as pd

# Carga el archivo CSV
df = pd.read_csv("/kaggle/input/student-habits-vs-academic-performance/student_habits_performance.csv")

# Ver columnas
print(df.columns.tolist())

# Muestra las primeras filas
df.head()

"""## Preprocesamiento

"""

import pandas as pd

# Cargar CSV
df = pd.read_csv("/kaggle/input/student-habits-vs-academic-performance/student_habits_performance.csv")

# Codificación de variables categóricas
df['gender'] = df['gender'].map({'Male': 0, 'Female': 1, 'Other': 2})
df['diet_quality'] = df['diet_quality'].map({'Poor': 0, 'Fair': 1, 'Good': 2})
df['parental_education_level'] = df['parental_education_level'].map({'High School': 0, 'Bachelor': 1, 'Other': 2})
df['internet_quality'] = df['internet_quality'].map({'Poor': 0, 'Average': 1, 'Good': 2})

# Mapear booleanos
df['part_time_job'] = df['part_time_job'].map({'Yes': 1, 'No': 0})
df['extracurricular_participation'] = df['extracurricular_participation'].map({'Yes': 1, 'No': 0})

# Columnas a usar
features = [
    'age', 'gender', 'study_hours_per_day', 'social_media_hours', 'netflix_hours',
    'part_time_job', 'attendance_percentage', 'sleep_hours', 'diet_quality',
    'exercise_frequency', 'parental_education_level', 'internet_quality',
    'mental_health_rating', 'extracurricular_participation'
]

X = df[features]
y = df['exam_score']

"""## Entrenamiento del modelo"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

"""## Predicción interactiva con input del usuario"""

def pedir_habitos():
    print("Introduce tus hábitos para predecir tu nota:")
    datos = {}
    datos['age'] = float(input("Edad: "))
    datos['gender'] = int(input("Género (0: Male, 1: Female, 2: Other): "))
    datos['study_hours_per_day'] = float(input("Horas de estudio por día: "))
    datos['social_media_hours'] = float(input("Horas en redes sociales por día: "))
    datos['netflix_hours'] = float(input("Horas viendo Netflix por día: "))
    datos['part_time_job'] = int(input("¿Tienes trabajo medio tiempo? (0: No, 1: Sí): "))
    datos['attendance_percentage'] = float(input("Porcentaje de asistencia (%): "))
    datos['sleep_hours'] = float(input("Horas de sueño por día: "))
    datos['diet_quality'] = int(input("Calidad de dieta (0: Poor, 1: Fair, 2: Good): "))
    datos['exercise_frequency'] = float(input("Frecuencia de ejercicio (veces/semana): "))
    datos['parental_education_level'] = int(input("Educación de padres (0: High School, 1: Bachelor, 2: Other): "))
    datos['internet_quality'] = int(input("Calidad de internet (0: Poor, 1: Average, 2: Good): "))
    datos['mental_health_rating'] = float(input("Salud mental (1 a 10): "))
    datos['extracurricular_participation'] = int(input("¿Participas en extracurriculares? (0: No, 1: Sí): "))
    return pd.DataFrame([datos])

# Pide hábitos al usuario y predice la nota
entrada_usuario = pedir_habitos()
prediccion = model.predict(entrada_usuario)[0]
print(f"\n🎓 Tu nota estimada en el examen sería: {prediccion:.2f}/100")

"""## Conclusión

El modelo muestra una capacidad razonable para predecir el desempeño académico basándose en hábitos diarios. Se podrían explorar otros algoritmos o incluir más datos (como notas anteriores) para mejorar la precisión.

## Posibles mejoras:
- Normalización de variables
- Optimización de hiperparámetros
- Visualización de correlaciones

"""